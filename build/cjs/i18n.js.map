{
  "version": 3,
  "sources": ["../esm/i18n.js"],
  "sourcesContent": ["import { readFileSync, readdirSync, existsSync } from \"node:fs\";\nimport { join } from \"node:path\";\nlet language = \"en\";\nlet words = null;\n// Init internationalization\nexport async function init(\n/** The root directory of the adapter */\nrootDir, \n/** The adapter instance or the language to use */\nlangOrAdmin) {\n    if (langOrAdmin && typeof langOrAdmin === \"object\") {\n        const adapter = langOrAdmin;\n        const systemConfig = await adapter.getForeignObjectAsync(\"system.config\");\n        if (systemConfig?.common.language) {\n            language = systemConfig?.common.language;\n        }\n    }\n    else if (typeof langOrAdmin === \"string\") {\n        language = langOrAdmin;\n    }\n    let files;\n    if (existsSync(join(rootDir, \"i18n\"))) {\n        files = readdirSync(join(rootDir, \"i18n\"));\n    }\n    else if (existsSync(join(rootDir, \"lib/i18n\"))) {\n        files = readdirSync(join(rootDir, \"lib/i18n\"));\n    }\n    else {\n        throw new Error(\"Cannot find i18n directory\");\n    }\n    words = {};\n    files.forEach((file) => {\n        if (file.endsWith(\".json\")) {\n            const lang = file.split(\".\")[0];\n            const wordsForLanguage = JSON.parse(readFileSync(join(rootDir, `/i18n/${file}`)).toString(\"utf8\"));\n            Object.keys(wordsForLanguage).forEach((key) => {\n                if (words) {\n                    if (!words[key]) {\n                        words[key] = {};\n                    }\n                    words[key][lang] = wordsForLanguage[key];\n                }\n            });\n        }\n    });\n}\n/**\n * Get translation as one string\n */\nexport function t(\n/** Word to translate */\nkey, \n/** Optional parameters to replace %s */\n...args) {\n    if (!words) {\n        throw new Error(\"i18n not initialized. Please call 'init(adapter)' before\");\n    }\n    if (!words[key]) {\n        return key;\n    }\n    let text = words[key][language] || words[key].en || key;\n    if (args.length) {\n        for (let i = 0; i < args.length; i++) {\n            text = text.replace(\"%s\", \n            // @ts-expect-error No idea why args[i] is not accepted here\n            args[i] === null ? \"null\" : args[i].toString());\n        }\n    }\n    return text;\n}\n/**\n * Get translation as ioBroker.Translated object\n */\nexport function tt(\n/** Word to translate */\nkey, \n/** Optional parameters to replace %s */\n...args) {\n    if (!words) {\n        throw new Error(\"i18n not initialized. Please call 'init(adapter)' before\");\n    }\n    if (words[key]) {\n        if (words[key].en && words[key].en.includes(\"%s\")) {\n            const result = {};\n            Object.keys(words[key]).forEach((lang) => {\n                for (let i = 0; i < args.length; i++) {\n                    result[lang] =\n                        // @ts-expect-error words[key] cannot be null\n                        words[key][lang].replace(\"%s\", \n                        // @ts-expect-error No idea why args[i] is not accepted here\n                        args[i] === null ? \"null\" : args[i].toString());\n                }\n            });\n            return result;\n        }\n        return words[key];\n    }\n    return key;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAsD;AACtD,uBAAqB;AACrB,IAAI,WAAW;AACf,IAAI,QAAQ;AAEZ,eAAsB,KAEtB,SAEA,aAAa;AACT,MAAI,eAAe,OAAO,gBAAgB,UAAU;AAChD,UAAM,UAAU;AAChB,UAAM,eAAe,MAAM,QAAQ,sBAAsB,eAAe;AACxE,QAAI,6CAAc,OAAO,UAAU;AAC/B,iBAAW,6CAAc,OAAO;AAAA,IACpC;AAAA,EACJ,WACS,OAAO,gBAAgB,UAAU;AACtC,eAAW;AAAA,EACf;AACA,MAAI;AACJ,UAAI,+BAAW,uBAAK,SAAS,MAAM,CAAC,GAAG;AACnC,gBAAQ,gCAAY,uBAAK,SAAS,MAAM,CAAC;AAAA,EAC7C,eACS,+BAAW,uBAAK,SAAS,UAAU,CAAC,GAAG;AAC5C,gBAAQ,gCAAY,uBAAK,SAAS,UAAU,CAAC;AAAA,EACjD,OACK;AACD,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAChD;AACA,UAAQ,CAAC;AACT,QAAM,QAAQ,CAAC,SAAS;AACpB,QAAI,KAAK,SAAS,OAAO,GAAG;AACxB,YAAM,OAAO,KAAK,MAAM,GAAG,EAAE;AAC7B,YAAM,mBAAmB,KAAK,UAAM,iCAAa,uBAAK,SAAS,SAAS,MAAM,CAAC,EAAE,SAAS,MAAM,CAAC;AACjG,aAAO,KAAK,gBAAgB,EAAE,QAAQ,CAAC,QAAQ;AAC3C,YAAI,OAAO;AACP,cAAI,CAAC,MAAM,MAAM;AACb,kBAAM,OAAO,CAAC;AAAA,UAClB;AACA,gBAAM,KAAK,QAAQ,iBAAiB;AAAA,QACxC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL;AAIO,SAAS,EAEhB,QAEG,MAAM;AACL,MAAI,CAAC,OAAO;AACR,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC9E;AACA,MAAI,CAAC,MAAM,MAAM;AACb,WAAO;AAAA,EACX;AACA,MAAI,OAAO,MAAM,KAAK,aAAa,MAAM,KAAK,MAAM;AACpD,MAAI,KAAK,QAAQ;AACb,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAO,KAAK;AAAA,QAAQ;AAAA,QAEpB,KAAK,OAAO,OAAO,SAAS,KAAK,GAAG,SAAS;AAAA,MAAC;AAAA,IAClD;AAAA,EACJ;AACA,SAAO;AACX;AAIO,SAAS,GAEhB,QAEG,MAAM;AACL,MAAI,CAAC,OAAO;AACR,UAAM,IAAI,MAAM,0DAA0D;AAAA,EAC9E;AACA,MAAI,MAAM,MAAM;AACZ,QAAI,MAAM,KAAK,MAAM,MAAM,KAAK,GAAG,SAAS,IAAI,GAAG;AAC/C,YAAM,SAAS,CAAC;AAChB,aAAO,KAAK,MAAM,IAAI,EAAE,QAAQ,CAAC,SAAS;AACtC,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,iBAAO,QAEH,MAAM,KAAK,MAAM;AAAA,YAAQ;AAAA,YAEzB,KAAK,OAAO,OAAO,SAAS,KAAK,GAAG,SAAS;AAAA,UAAC;AAAA,QACtD;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAO,MAAM;AAAA,EACjB;AACA,SAAO;AACX;",
  "names": []
}
