{
  "version": 3,
  "sources": ["../esm/helpers.js"],
  "sourcesContent": ["import * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport { createRequire } from \"node:module\";\nimport * as url from \"node:url\";\n// eslint-disable-next-line unicorn/prefer-module\nconst require = createRequire(import.meta.url || \"file://\" + __filename);\nconst thisDir = url.fileURLToPath(\n// eslint-disable-next-line unicorn/prefer-module\nnew URL(\".\", import.meta.url || \"file://\" + __filename));\n/**\n * Tries to resolve a package using Node.js resolution.\n * Directory names differing from the package name and alternate lookup paths can be passed.\n */\nexport function tryResolvePackage(possiblePaths, lookupPaths) {\n    for (const pkg of possiblePaths) {\n        try {\n            // package.json is guaranteed to be in the module root folder\n            // so once that is resolved, take the dirname and we're done\n            const possiblePath = require.resolve(`${pkg}/package.json`, lookupPaths?.length ? { paths: lookupPaths } : undefined);\n            if (fs.existsSync(possiblePath)) {\n                return path.dirname(possiblePath);\n            }\n        }\n        catch {\n            /* not found */\n        }\n    }\n}\n/**\n * Scans for a package by walking up the directory tree and inspecting package.json\n * Directory names differing from the package name and an alternate start dir can be passed.\n */\nexport function scanForPackage(possiblePaths, startDir = thisDir) {\n    // We start in the node_modules subfolder of adapter-core, which is the deepest we should be able to expect the controller\n    let curDir = path.join(startDir, \"../node_modules\");\n    while (true) {\n        for (const pkg of possiblePaths) {\n            const possiblePath = path.join(curDir, pkg, \"package.json\");\n            try {\n                // If package.json exists in the directory and its name field matches, we've found js-controller\n                if (fs.existsSync(possiblePath) &&\n                    JSON.parse(fs.readFileSync(possiblePath, \"utf8\")).name ===\n                        pkg.toLowerCase()) {\n                    return path.dirname(possiblePath);\n                }\n            }\n            catch {\n                // don't care\n            }\n        }\n        // Nothing found here, go up one level\n        const parentDir = path.dirname(curDir);\n        if (parentDir === curDir) {\n            // we've reached the root without finding js-controller\n            break;\n        }\n        curDir = parentDir;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB;AACpB,WAAsB;AACtB,yBAA8B;AAC9B,UAAqB;AAHrB;AAKA,MAAMA,eAAU,kCAAc,YAAY,OAAO,YAAY,UAAU;AACvE,MAAM,UAAU,IAAI;AAAA,EAEpB,IAAI,IAAI,KAAK,YAAY,OAAO,YAAY,UAAU;AAAC;AAKhD,SAAS,kBAAkB,eAAe,aAAa;AAC1D,aAAW,OAAO,eAAe;AAC7B,QAAI;AAGA,YAAM,eAAeA,SAAQ,QAAQ,GAAG,qBAAoB,2CAAa,UAAS,EAAE,OAAO,YAAY,IAAI,MAAS;AACpH,UAAI,GAAG,WAAW,YAAY,GAAG;AAC7B,eAAO,KAAK,QAAQ,YAAY;AAAA,MACpC;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AACJ;AAKO,SAAS,eAAe,eAAe,WAAW,SAAS;AAE9D,MAAI,SAAS,KAAK,KAAK,UAAU,iBAAiB;AAClD,SAAO,MAAM;AACT,eAAW,OAAO,eAAe;AAC7B,YAAM,eAAe,KAAK,KAAK,QAAQ,KAAK,cAAc;AAC1D,UAAI;AAEA,YAAI,GAAG,WAAW,YAAY,KAC1B,KAAK,MAAM,GAAG,aAAa,cAAc,MAAM,CAAC,EAAE,SAC9C,IAAI,YAAY,GAAG;AACvB,iBAAO,KAAK,QAAQ,YAAY;AAAA,QACpC;AAAA,MACJ,QACA;AAAA,MAEA;AAAA,IACJ;AAEA,UAAM,YAAY,KAAK,QAAQ,MAAM;AACrC,QAAI,cAAc,QAAQ;AAEtB;AAAA,IACJ;AACA,aAAS;AAAA,EACb;AACJ;",
  "names": ["require"]
}
