{
  "version": 3,
  "sources": ["../esm/helpers.js"],
  "sourcesContent": ["import { existsSync, readFileSync } from 'node:fs';\nimport { dirname, join } from 'node:path';\nimport { createRequire } from 'node:module';\nimport { fileURLToPath } from 'node:url';\nconst require = createRequire(import.meta.url || `file://${__filename}`);\nconst thisDir = fileURLToPath(new URL('.', import.meta.url || `file://${__filename}`));\n/**\n * Tries to resolve a package using Node.js resolution.\n * Directory names differing from the package name and alternate lookup paths can be passed.\n *\n * @param possiblePaths all possible paths the package can be resolved from\n * @param lookupPaths lookup paths passed to `require.resolve`\n */\nexport function tryResolvePackage(possiblePaths, lookupPaths) {\n    for (const pkg of possiblePaths) {\n        try {\n            // package.json is guaranteed to be in the module root folder\n            // so once that is resolved, take the dirname and we're done\n            const possiblePath = require.resolve(`${pkg}/package.json`, lookupPaths?.length ? { paths: lookupPaths } : undefined);\n            if (existsSync(possiblePath)) {\n                return dirname(possiblePath);\n            }\n        }\n        catch {\n            /* not found */\n        }\n    }\n}\n/**\n * Scans for a package by walking up the directory tree and inspecting package.json\n * Directory names differing from the package name and an alternate start dir can be passed.\n *\n * @param possiblePaths All possible paths to check\n * @param startDir Optional start directory where we scan for the package\n */\nexport function scanForPackage(possiblePaths, startDir = thisDir) {\n    // We start in the node_modules subfolder of adapter-core,\n    // which is the deepest we should be able to expect the controller\n    let curDir = join(startDir, '../node_modules');\n    while (true) {\n        for (const pkg of possiblePaths) {\n            const possiblePath = join(curDir, pkg, 'package.json');\n            try {\n                // If package.json exists in the directory and its name field matches, we've found js-controller\n                if (existsSync(possiblePath) &&\n                    JSON.parse(readFileSync(possiblePath, 'utf8')).name === pkg.toLowerCase()) {\n                    return dirname(possiblePath);\n                }\n            }\n            catch {\n                // don't care\n            }\n        }\n        // Nothing found here, go up one level\n        const parentDir = dirname(curDir);\n        if (parentDir === curDir) {\n            // we've reached the root without finding js-controller\n            break;\n        }\n        curDir = parentDir;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAyC;AACzC,uBAA8B;AAC9B,yBAA8B;AAC9B,sBAA8B;AAH9B;AAIA,MAAMA,eAAU,kCAAc,YAAY,OAAO,UAAU,YAAY;AACvE,MAAM,cAAU,+BAAc,IAAI,IAAI,KAAK,YAAY,OAAO,UAAU,YAAY,CAAC;AAQ9E,SAAS,kBAAkB,eAAe,aAAa;AAC1D,aAAW,OAAO,eAAe;AAC7B,QAAI;AAGA,YAAM,eAAeA,SAAQ,QAAQ,GAAG,qBAAoB,2CAAa,UAAS,EAAE,OAAO,YAAY,IAAI,MAAS;AACpH,cAAI,2BAAW,YAAY,GAAG;AAC1B,mBAAO,0BAAQ,YAAY;AAAA,MAC/B;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AACJ;AAQO,SAAS,eAAe,eAAe,WAAW,SAAS;AAG9D,MAAI,aAAS,uBAAK,UAAU,iBAAiB;AAC7C,SAAO,MAAM;AACT,eAAW,OAAO,eAAe;AAC7B,YAAM,mBAAe,uBAAK,QAAQ,KAAK,cAAc;AACrD,UAAI;AAEA,gBAAI,2BAAW,YAAY,KACvB,KAAK,UAAM,6BAAa,cAAc,MAAM,CAAC,EAAE,SAAS,IAAI,YAAY,GAAG;AAC3E,qBAAO,0BAAQ,YAAY;AAAA,QAC/B;AAAA,MACJ,QACA;AAAA,MAEA;AAAA,IACJ;AAEA,UAAM,gBAAY,0BAAQ,MAAM;AAChC,QAAI,cAAc,QAAQ;AAEtB;AAAA,IACJ;AACA,aAAS;AAAA,EACb;AACJ;",
  "names": ["require"]
}
