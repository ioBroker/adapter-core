{
  "version": 3,
  "sources": ["../esm/controllerTools.js"],
  "sourcesContent": ["import * as path from \"node:path\";\nimport { tryResolvePackage } from \"./helpers\";\nimport * as utils from \"./utils\";\nimport { createRequire } from \"node:module\";\n// eslint-disable-next-line unicorn/prefer-module\nvar require = createRequire(import.meta.url || \"file://\" + __filename);\nexport var controllerCommonModulesInternal;\nfunction resolveControllerTools() {\n    // Attempt 1: Resolve @iobroker/js-controller-common from here - JS-Controller 4.1+\n    var importPath = tryResolvePackage([\"@iobroker/js-controller-common\"]);\n    if (importPath) {\n        try {\n            controllerCommonModulesInternal = require(importPath);\n            var tools = controllerCommonModulesInternal.tools;\n            if (tools)\n                return tools;\n        }\n        catch (_a) {\n            // did not work, continue\n        }\n    }\n    // Attempt 2: Resolve @iobroker/js-controller-common in JS-Controller dir - JS-Controller 4.1+\n    importPath = tryResolvePackage([\"@iobroker/js-controller-common\"], [path.join(utils.controllerDir, \"node_modules\")]);\n    if (importPath) {\n        try {\n            controllerCommonModulesInternal = require(importPath);\n            var tools = controllerCommonModulesInternal.tools;\n            if (tools)\n                return tools;\n        }\n        catch (_b) {\n            // did not work, continue\n        }\n    }\n    // Attempt 3: Legacy resolve - until JS-Controller 4.0\n    importPath = path.join(utils.controllerDir, \"lib\");\n    try {\n        // This was a default export prior to the TS migration\n        var tools = require(path.join(importPath, \"tools\"));\n        if (tools)\n            return tools;\n    }\n    catch (_c) {\n        // did not work, continue\n    }\n    throw new Error(\"Cannot resolve tools module\");\n    //return process.exit(10);\n}\n/** The collection of utility functions in JS-Controller, formerly `lib/tools.js` */\nexport var controllerToolsInternal = resolveControllerTools();\n// Export a subset of the utilties in controllerTools\n/**\n * Resolve a module that is either exported by @iobroker/js-controller-common (new controllers) or located in the controller's `lib` directory (old controllers).\n * @param name - The filename of the module to resolve\n * @param exportName - The name under which the module may be exported. Defaults to `name`.\n */\nexport function resolveNamedModule(name, exportName) {\n    if (exportName === void 0) { exportName = name; }\n    // The requested module might be moved to @iobroker/js-controller-common and exported from there\n    if (controllerCommonModulesInternal === null || controllerCommonModulesInternal === void 0 ? void 0 : controllerCommonModulesInternal[exportName])\n        return controllerCommonModulesInternal[exportName];\n    // Otherwise it was not moved yet, or we're dealing with JS-Controller <= 4.0\n    var importPaths = [\n        // Attempt 1: JS-Controller 6+\n        path.join(utils.controllerDir, \"build/cjs/lib\", name),\n        // Attempt 2: JS-Controller 4.1+\n        path.join(utils.controllerDir, \"build/lib\", name),\n        // Attempt 3: JS-Controller <= 4.0\n        path.join(utils.controllerDir, \"lib\", name),\n    ];\n    for (var _i = 0, importPaths_1 = importPaths; _i < importPaths_1.length; _i++) {\n        var importPath = importPaths_1[_i];\n        try {\n            // This was a default export prior to the TS migration\n            var module_1 = require(importPath);\n            if (module_1)\n                return module_1;\n        }\n        catch (_a) {\n            // did not work, continue\n        }\n    }\n    throw new Error(\"Cannot resolve JS-Controller module \".concat(name, \".js\"));\n    //return process.exit(10);\n}\n// TODO: Import types from @iobroker/js-controller-common and iobroker.js-controller\n/**\n * Converts a pattern to match object IDs into a RegEx string that can be used in `new RegExp(...)`\n * @param pattern The pattern to convert\n * @returns The RegEx string\n */\nfunction pattern2RegEx(pattern) {\n    return controllerToolsInternal.pattern2RegEx(pattern);\n}\n/**\n * Finds the adapter directory of a given adapter\n *\n * @param adapter name of the adapter, e.g. hm-rpc\n * @returns path to adapter directory or null if no directory found\n */\nfunction getAdapterDir(adapter) {\n    return controllerToolsInternal.getAdapterDir(adapter);\n}\n/**\n * Get list of all installed adapters and controller version on this host\n * @param hostJsControllerVersion Version of the running js-controller, will be included in the returned information if provided\n * @returns object containing information about installed host\n */\nfunction getInstalledInfo(hostJsControllerVersion) {\n    return controllerToolsInternal.getInstalledInfo(hostJsControllerVersion);\n}\n/**\n * Checks if we are running inside a docker container\n */\nfunction isDocker() {\n    return controllerToolsInternal.isDocker();\n}\n/**\n * Checks if given ip address is matching ipv4 or ipv6 localhost\n * @param ip ipv4 or ipv6 address\n */\nfunction isLocalAddress(ip) {\n    return controllerToolsInternal.isLocalAddress(ip);\n}\n/**\n * Checks if given ip address is matching ipv4 or ipv6 \"listen all\" address\n * @param ip ipv4 or ipv6 address\n */\nfunction isListenAllAddress(ip) {\n    return controllerToolsInternal.isListenAllAddress(ip);\n}\n/**\n * Retrieve the localhost address according to the configured DNS resolution strategy\n */\nfunction getLocalAddress() {\n    return controllerToolsInternal.getLocalAddress();\n}\n/**\n * Get the ip to listen to all addresses according to configured DNS resolution strategy\n */\nfunction getListenAllAddress() {\n    return controllerToolsInternal.getListenAllAddress();\n}\nexport var commonTools = {\n    pattern2RegEx: pattern2RegEx,\n    getAdapterDir: getAdapterDir,\n    getInstalledInfo: getInstalledInfo,\n    isDocker: isDocker,\n    getLocalAddress: getLocalAddress,\n    getListenAllAddress: getListenAllAddress,\n    isLocalAddress: isLocalAddress,\n    isListenAllAddress: isListenAllAddress,\n    // TODO: Add more methods from lib/tools.js as needed\n    password: resolveNamedModule(\"password\"),\n    session: resolveNamedModule(\"session\"),\n    zipFiles: resolveNamedModule(\"zipFiles\"),\n    // TODO: expose more (internal) controller modules as needed\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AACtB,qBAAkC;AAClC,YAAuB;AACvB,yBAA8B;AAH9B;AAKA,IAAIA,eAAU,kCAAc,YAAY,OAAO,YAAY,UAAU;AAC9D,IAAI;AACX,SAAS,yBAAyB;AAE9B,MAAI,iBAAa,kCAAkB,CAAC,gCAAgC,CAAC;AACrE,MAAI,YAAY;AACZ,QAAI;AACA,wCAAkCA,SAAQ,UAAU;AACpD,UAAI,QAAQ,gCAAgC;AAC5C,UAAI;AACA,eAAO;AAAA,IACf,SACO,IAAP;AAAA,IAEA;AAAA,EACJ;AAEA,mBAAa,kCAAkB,CAAC,gCAAgC,GAAG,CAAC,KAAK,KAAK,MAAM,eAAe,cAAc,CAAC,CAAC;AACnH,MAAI,YAAY;AACZ,QAAI;AACA,wCAAkCA,SAAQ,UAAU;AACpD,UAAI,QAAQ,gCAAgC;AAC5C,UAAI;AACA,eAAO;AAAA,IACf,SACO,IAAP;AAAA,IAEA;AAAA,EACJ;AAEA,eAAa,KAAK,KAAK,MAAM,eAAe,KAAK;AACjD,MAAI;AAEA,QAAI,QAAQA,SAAQ,KAAK,KAAK,YAAY,OAAO,CAAC;AAClD,QAAI;AACA,aAAO;AAAA,EACf,SACO,IAAP;AAAA,EAEA;AACA,QAAM,IAAI,MAAM,6BAA6B;AAEjD;AAEO,IAAI,0BAA0B,uBAAuB;AAOrD,SAAS,mBAAmB,MAAM,YAAY;AACjD,MAAI,eAAe,QAAQ;AAAE,iBAAa;AAAA,EAAM;AAEhD,MAAI,oCAAoC,QAAQ,oCAAoC,SAAS,SAAS,gCAAgC;AAClI,WAAO,gCAAgC;AAE3C,MAAI,cAAc;AAAA,IAEd,KAAK,KAAK,MAAM,eAAe,iBAAiB,IAAI;AAAA,IAEpD,KAAK,KAAK,MAAM,eAAe,aAAa,IAAI;AAAA,IAEhD,KAAK,KAAK,MAAM,eAAe,OAAO,IAAI;AAAA,EAC9C;AACA,WAAS,KAAK,GAAG,gBAAgB,aAAa,KAAK,cAAc,QAAQ,MAAM;AAC3E,QAAI,aAAa,cAAc;AAC/B,QAAI;AAEA,UAAI,WAAWA,SAAQ,UAAU;AACjC,UAAI;AACA,eAAO;AAAA,IACf,SACO,IAAP;AAAA,IAEA;AAAA,EACJ;AACA,QAAM,IAAI,MAAM,uCAAuC,OAAO,MAAM,KAAK,CAAC;AAE9E;AAOA,SAAS,cAAc,SAAS;AAC5B,SAAO,wBAAwB,cAAc,OAAO;AACxD;AAOA,SAAS,cAAc,SAAS;AAC5B,SAAO,wBAAwB,cAAc,OAAO;AACxD;AAMA,SAAS,iBAAiB,yBAAyB;AAC/C,SAAO,wBAAwB,iBAAiB,uBAAuB;AAC3E;AAIA,SAAS,WAAW;AAChB,SAAO,wBAAwB,SAAS;AAC5C;AAKA,SAAS,eAAe,IAAI;AACxB,SAAO,wBAAwB,eAAe,EAAE;AACpD;AAKA,SAAS,mBAAmB,IAAI;AAC5B,SAAO,wBAAwB,mBAAmB,EAAE;AACxD;AAIA,SAAS,kBAAkB;AACvB,SAAO,wBAAwB,gBAAgB;AACnD;AAIA,SAAS,sBAAsB;AAC3B,SAAO,wBAAwB,oBAAoB;AACvD;AACO,IAAI,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,UAAU,mBAAmB,UAAU;AAAA,EACvC,SAAS,mBAAmB,SAAS;AAAA,EACrC,UAAU,mBAAmB,UAAU;AAE3C;",
  "names": ["require"]
}
