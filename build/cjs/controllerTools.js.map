{
  "version": 3,
  "sources": ["../esm/controllerTools.js"],
  "sourcesContent": ["import { join } from 'node:path';\nimport { createRequire } from 'node:module';\nimport { tryResolvePackage } from './helpers.js';\nimport * as utils from './utils.js';\nconst require = createRequire(import.meta.url || `file://${__filename}`);\nexport let controllerCommonModulesInternal;\nfunction resolveControllerTools() {\n    // Attempt 1: Resolve @iobroker/js-controller-common from here - JS-Controller 4.1+\n    let importPath = tryResolvePackage(['@iobroker/js-controller-common']);\n    if (importPath) {\n        try {\n            controllerCommonModulesInternal = require(importPath);\n            const { tools } = controllerCommonModulesInternal;\n            if (tools) {\n                return tools;\n            }\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 2: Resolve @iobroker/js-controller-common in JS-Controller dir - JS-Controller 4.1+\n    importPath = tryResolvePackage(['@iobroker/js-controller-common'], [join(utils.controllerDir, 'node_modules')]);\n    if (importPath) {\n        try {\n            controllerCommonModulesInternal = require(importPath);\n            const { tools } = controllerCommonModulesInternal;\n            if (tools) {\n                return tools;\n            }\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 3: Legacy resolve - until JS-Controller 4.0\n    importPath = join(utils.controllerDir, 'lib');\n    try {\n        // This was a default export prior to the TS migration\n        const tools = require(join(importPath, 'tools'));\n        if (tools) {\n            return tools;\n        }\n    }\n    catch {\n        // did not work, continue\n    }\n    throw new Error('Cannot resolve tools module');\n    //return process.exit(10);\n}\n/** The collection of utility functions in JS-Controller, formerly `lib/tools.js` */\nexport const controllerToolsInternal = resolveControllerTools();\n// Export a subset of the utilities in controllerTools\n/**\n * Resolve a module that is either exported by @iobroker/js-controller-common (new controllers) or located in the controller's `lib` directory (old controllers).\n *\n * @param name - The filename of the module to resolve\n * @param exportName - The name under which the module may be exported. Defaults to `name`.\n */\nexport function resolveNamedModule(name, exportName = name) {\n    // The requested module might be moved to @iobroker/js-controller-common and exported from there\n    if (controllerCommonModulesInternal?.[exportName]) {\n        return controllerCommonModulesInternal[exportName];\n    }\n    // Otherwise it was not moved yet, or we're dealing with JS-Controller <= 4.0\n    const importPaths = [\n        // Attempt 1: JS-Controller 6+\n        join(utils.controllerDir, 'build/cjs/lib', name),\n        // Attempt 2: JS-Controller 4.1+\n        join(utils.controllerDir, 'build/lib', name),\n        // Attempt 3: JS-Controller <= 4.0\n        join(utils.controllerDir, 'lib', name),\n    ];\n    for (const importPath of importPaths) {\n        try {\n            // This was a default export prior to the TS migration\n            const module = require(importPath);\n            if (module) {\n                return module;\n            }\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    throw new Error(`Cannot resolve JS-Controller module ${name}.js`);\n    //return process.exit(10);\n}\n// TODO: Import types from @iobroker/js-controller-common and iobroker.js-controller\n/**\n * Converts a pattern to match object IDs into a RegEx string that can be used in `new RegExp(...)`\n *\n * @param pattern The pattern to convert\n * @returns The RegEx string\n */\nfunction pattern2RegEx(pattern) {\n    return controllerToolsInternal.pattern2RegEx(pattern);\n}\n/**\n * Finds the adapter directory of a given adapter\n *\n * @param adapter name of the adapter, e.g., `hm-rpc`\n * @returns path to adapter directory or null if no directory found\n */\nfunction getAdapterDir(adapter) {\n    return controllerToolsInternal.getAdapterDir(adapter);\n}\n/**\n * Get a list of all installed adapters and controller version on this host\n *\n * @param hostJsControllerVersion Version of the running js-controller, will be included in the returned information if provided\n * @returns object containing information about installed host\n */\nfunction getInstalledInfo(hostJsControllerVersion) {\n    return controllerToolsInternal.getInstalledInfo(hostJsControllerVersion);\n}\n/**\n * Checks if we are running inside a docker container\n */\nfunction isDocker() {\n    return controllerToolsInternal.isDocker();\n}\n/**\n * Checks if given ip address is matching ipv4 or ipv6 localhost\n *\n * @param ip ipv4 or ipv6 address\n */\nfunction isLocalAddress(ip) {\n    return controllerToolsInternal.isLocalAddress(ip);\n}\n/**\n * Checks if given ip address is matching ipv4 or ipv6 \"listen all\" address\n *\n * @param ip ipv4 or ipv6 address\n */\nfunction isListenAllAddress(ip) {\n    return controllerToolsInternal.isListenAllAddress(ip);\n}\n/**\n * Retrieve the localhost address according to the configured DNS resolution strategy\n */\nfunction getLocalAddress() {\n    return controllerToolsInternal.getLocalAddress();\n}\n/**\n * Get the ip to listen to all addresses according to configured DNS resolution strategy\n */\nfunction getListenAllAddress() {\n    return controllerToolsInternal.getListenAllAddress();\n}\nexport const commonTools = {\n    pattern2RegEx,\n    getAdapterDir,\n    getInstalledInfo,\n    isDocker,\n    getLocalAddress,\n    getListenAllAddress,\n    isLocalAddress,\n    isListenAllAddress,\n    // TODO: Add more methods from lib/tools.js as needed\n    password: resolveNamedModule('password'),\n    session: resolveNamedModule('session'),\n    zipFiles: resolveNamedModule('zipFiles'),\n    // TODO: expose more (internal) controller modules as needed\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAqB;AACrB,yBAA8B;AAC9B,qBAAkC;AAClC,YAAuB;AAHvB;AAIA,MAAMA,eAAU,kCAAc,YAAY,OAAO,UAAU,YAAY;AAChE,IAAI;AACX,SAAS,yBAAyB;AAE9B,MAAI,iBAAa,kCAAkB,CAAC,gCAAgC,CAAC;AACrE,MAAI,YAAY;AACZ,QAAI;AACA,wCAAkCA,SAAQ,UAAU;AACpD,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,OAAO;AACP,eAAO;AAAA,MACX;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,mBAAa,kCAAkB,CAAC,gCAAgC,GAAG,KAAC,uBAAK,MAAM,eAAe,cAAc,CAAC,CAAC;AAC9G,MAAI,YAAY;AACZ,QAAI;AACA,wCAAkCA,SAAQ,UAAU;AACpD,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,OAAO;AACP,eAAO;AAAA,MACX;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,mBAAa,uBAAK,MAAM,eAAe,KAAK;AAC5C,MAAI;AAEA,UAAM,QAAQA,aAAQ,uBAAK,YAAY,OAAO,CAAC;AAC/C,QAAI,OAAO;AACP,aAAO;AAAA,IACX;AAAA,EACJ,QACA;AAAA,EAEA;AACA,QAAM,IAAI,MAAM,6BAA6B;AAEjD;AAEO,MAAM,0BAA0B,uBAAuB;AAQvD,SAAS,mBAAmB,MAAM,aAAa,MAAM;AAExD,MAAI,mFAAkC,aAAa;AAC/C,WAAO,gCAAgC;AAAA,EAC3C;AAEA,QAAM,cAAc;AAAA,QAEhB,uBAAK,MAAM,eAAe,iBAAiB,IAAI;AAAA,QAE/C,uBAAK,MAAM,eAAe,aAAa,IAAI;AAAA,QAE3C,uBAAK,MAAM,eAAe,OAAO,IAAI;AAAA,EACzC;AACA,aAAW,cAAc,aAAa;AAClC,QAAI;AAEA,YAAMC,UAASD,SAAQ,UAAU;AACjC,UAAIC,SAAQ;AACR,eAAOA;AAAA,MACX;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AACA,QAAM,IAAI,MAAM,uCAAuC,SAAS;AAEpE;AAQA,SAAS,cAAc,SAAS;AAC5B,SAAO,wBAAwB,cAAc,OAAO;AACxD;AAOA,SAAS,cAAc,SAAS;AAC5B,SAAO,wBAAwB,cAAc,OAAO;AACxD;AAOA,SAAS,iBAAiB,yBAAyB;AAC/C,SAAO,wBAAwB,iBAAiB,uBAAuB;AAC3E;AAIA,SAAS,WAAW;AAChB,SAAO,wBAAwB,SAAS;AAC5C;AAMA,SAAS,eAAe,IAAI;AACxB,SAAO,wBAAwB,eAAe,EAAE;AACpD;AAMA,SAAS,mBAAmB,IAAI;AAC5B,SAAO,wBAAwB,mBAAmB,EAAE;AACxD;AAIA,SAAS,kBAAkB;AACvB,SAAO,wBAAwB,gBAAgB;AACnD;AAIA,SAAS,sBAAsB;AAC3B,SAAO,wBAAwB,oBAAoB;AACvD;AACO,MAAM,cAAc;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,UAAU,mBAAmB,UAAU;AAAA,EACvC,SAAS,mBAAmB,SAAS;AAAA,EACrC,UAAU,mBAAmB,UAAU;AAE3C;",
  "names": ["require", "module"]
}
