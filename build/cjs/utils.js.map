{
  "version": 3,
  "sources": ["../esm/utils.js"],
  "sourcesContent": ["import { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { createRequire } from 'node:module';\nimport { scanForPackage, tryResolvePackage } from './helpers.js';\nconst require = createRequire(import.meta.url || `file://${__filename}`);\n/**\n * Resolves the root directory of JS-Controller and returns it or exits the process\n *\n * @param isInstall Whether the adapter is run in \"install\" mode or if it should execute normally\n */\nfunction getControllerDir(isInstall) {\n    // Find the js-controller location\n    const possibilities = ['iobroker.js-controller', 'ioBroker.js-controller'];\n    // First, try to let Node.js resolve the package by itself\n    let controllerDir = tryResolvePackage(possibilities);\n    // Apparently, checking vs. null/undefined may miss the odd case of controllerPath being \"\"\n    // Thus we check for falseness, which includes failing on an empty path\n    if (controllerDir) {\n        return controllerDir;\n    }\n    // As a fallback solution, we walk up the directory tree until we reach the root or find js-controller\n    controllerDir = scanForPackage(possibilities);\n    if (controllerDir) {\n        return controllerDir;\n    }\n    if (!isInstall) {\n        console.log('Cannot find js-controller');\n        return process.exit(10);\n    }\n    return process.exit();\n}\n/** The root directory of JS-Controller */\nexport const controllerDir = getControllerDir(!!process?.argv?.includes('--install'));\nfunction resolveAdapterConstructor() {\n    // Attempt 1: Resolve @iobroker/js-controller-adapter from here - JS-Controller 4.1+\n    let adapterPath = tryResolvePackage(['@iobroker/js-controller-adapter']);\n    if (adapterPath) {\n        try {\n            const { Adapter } = require(adapterPath);\n            if (Adapter) {\n                return Adapter;\n            }\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 2: Resolve @iobroker/js-controller-adapter in JS-Controller dir - JS-Controller 4.1+\n    adapterPath = tryResolvePackage(['@iobroker/js-controller-adapter'], [join(controllerDir, 'node_modules')]);\n    if (adapterPath) {\n        try {\n            const { Adapter } = require(adapterPath);\n            if (Adapter) {\n                return Adapter;\n            }\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 3: JS-Controller 6+ with adapter stub\n    adapterPath = join(controllerDir, 'build/cjs/lib/adapter.js');\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter) {\n            return Adapter;\n        }\n    }\n    catch {\n        // did not work, continue\n    }\n    // Attempt 4: JS-Controller 4.1+ with adapter stub\n    adapterPath = join(controllerDir, 'build/lib/adapter.js');\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter) {\n            return Adapter;\n        }\n    }\n    catch {\n        // did not work, continue\n    }\n    // Attempt 5: Legacy resolve - until JS-Controller 4.0\n    adapterPath = join(controllerDir, 'lib/adapter.js');\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter) {\n            return Adapter;\n        }\n    }\n    catch {\n        // did not work, continue\n    }\n    throw new Error('Cannot resolve adapter class');\n}\n/** Reads the configuration file of JS-Controller */\nexport function getConfig() {\n    return JSON.parse(readFileSync(join(controllerDir, 'conf/iobroker.json'), 'utf8'));\n}\n/** Creates a new adapter instance */\nexport const adapter = resolveAdapterConstructor();\n/** Creates a new adapter instance */\nexport const Adapter = adapter;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA6B;AAC7B,uBAAqB;AACrB,yBAA8B;AAC9B,qBAAkD;AAHlD;AAAA;AAIA,MAAMA,eAAU,kCAAc,YAAY,OAAO,UAAU,YAAY;AAMvE,SAAS,iBAAiB,WAAW;AAEjC,QAAM,gBAAgB,CAAC,0BAA0B,wBAAwB;AAEzE,MAAIC,qBAAgB,kCAAkB,aAAa;AAGnD,MAAIA,gBAAe;AACf,WAAOA;AAAA,EACX;AAEA,EAAAA,qBAAgB,+BAAe,aAAa;AAC5C,MAAIA,gBAAe;AACf,WAAOA;AAAA,EACX;AACA,MAAI,CAAC,WAAW;AACZ,YAAQ,IAAI,2BAA2B;AACvC,WAAO,QAAQ,KAAK,EAAE;AAAA,EAC1B;AACA,SAAO,QAAQ,KAAK;AACxB;AAEO,MAAM,gBAAgB,iBAAiB,CAAC,GAAC,wCAAS,SAAT,mBAAe,SAAS,aAAY;AACpF,SAAS,4BAA4B;AAEjC,MAAI,kBAAc,kCAAkB,CAAC,iCAAiC,CAAC;AACvE,MAAI,aAAa;AACb,QAAI;AACA,YAAM,EAAE,SAAAC,SAAQ,IAAIF,SAAQ,WAAW;AACvC,UAAIE,UAAS;AACT,eAAOA;AAAA,MACX;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,oBAAc,kCAAkB,CAAC,iCAAiC,GAAG,KAAC,uBAAK,eAAe,cAAc,CAAC,CAAC;AAC1G,MAAI,aAAa;AACb,QAAI;AACA,YAAM,EAAE,SAAAA,SAAQ,IAAIF,SAAQ,WAAW;AACvC,UAAIE,UAAS;AACT,eAAOA;AAAA,MACX;AAAA,IACJ,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,oBAAc,uBAAK,eAAe,0BAA0B;AAC5D,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE,UAAS;AACT,aAAOA;AAAA,IACX;AAAA,EACJ,QACA;AAAA,EAEA;AAEA,oBAAc,uBAAK,eAAe,sBAAsB;AACxD,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE,UAAS;AACT,aAAOA;AAAA,IACX;AAAA,EACJ,QACA;AAAA,EAEA;AAEA,oBAAc,uBAAK,eAAe,gBAAgB;AAClD,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE,UAAS;AACT,aAAOA;AAAA,IACX;AAAA,EACJ,QACA;AAAA,EAEA;AACA,QAAM,IAAI,MAAM,8BAA8B;AAClD;AAEO,SAAS,YAAY;AACxB,SAAO,KAAK,UAAM,iCAAa,uBAAK,eAAe,oBAAoB,GAAG,MAAM,CAAC;AACrF;AAEO,MAAM,UAAU,0BAA0B;AAE1C,MAAM,UAAU;",
  "names": ["require", "controllerDir", "Adapter"]
}
