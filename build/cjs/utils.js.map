{
  "version": 3,
  "sources": ["../esm/utils.js"],
  "sourcesContent": ["import * as fs from \"node:fs\";\nimport * as path from \"node:path\";\nimport { createRequire } from \"node:module\";\nimport { scanForPackage, tryResolvePackage } from \"./helpers.js\";\n// eslint-disable-next-line unicorn/prefer-module\nconst require = createRequire(import.meta.url || \"file://\" + __filename);\n/**\n * Resolves the root directory of JS-Controller and returns it or exits the process\n * @param isInstall Whether the adapter is run in \"install\" mode or if it should execute normally\n */\nfunction getControllerDir(isInstall) {\n    // Find the js-controller location\n    const possibilities = [\"iobroker.js-controller\", \"ioBroker.js-controller\"];\n    // First try to let Node.js resolve the package by itself\n    let controllerDir = tryResolvePackage(possibilities);\n    // Apparently, checking vs null/undefined may miss the odd case of controllerPath being \"\"\n    // Thus we check for falsyness, which includes failing on an empty path\n    if (controllerDir)\n        return controllerDir;\n    // As a fallback solution, we walk up the directory tree until we reach the root or find js-controller\n    controllerDir = scanForPackage(possibilities);\n    if (controllerDir)\n        return controllerDir;\n    if (!isInstall) {\n        console.log(\"Cannot find js-controller\");\n        return process.exit(10);\n    }\n    else {\n        return process.exit();\n    }\n}\n/** The root directory of JS-Controller */\nexport const controllerDir = getControllerDir(!!process?.argv?.includes(\"--install\"));\nfunction resolveAdapterConstructor() {\n    // Attempt 1: Resolve @iobroker/js-controller-adapter from here - JS-Controller 4.1+\n    let adapterPath = tryResolvePackage([\"@iobroker/js-controller-adapter\"]);\n    if (adapterPath) {\n        try {\n            const { Adapter } = require(adapterPath);\n            if (Adapter)\n                return Adapter;\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 2: Resolve @iobroker/js-controller-adapter in JS-Controller dir - JS-Controller 4.1+\n    adapterPath = tryResolvePackage([\"@iobroker/js-controller-adapter\"], [path.join(controllerDir, \"node_modules\")]);\n    if (adapterPath) {\n        try {\n            const { Adapter } = require(adapterPath);\n            if (Adapter)\n                return Adapter;\n        }\n        catch {\n            // did not work, continue\n        }\n    }\n    // Attempt 3: JS-Controller 6+ with adapter stub\n    adapterPath = path.join(controllerDir, \"build/cjs/lib/adapter.js\");\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter)\n            return Adapter;\n    }\n    catch {\n        // did not work, continue\n    }\n    // Attempt 4: JS-Controller 4.1+ with adapter stub\n    adapterPath = path.join(controllerDir, \"build/lib/adapter.js\");\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter)\n            return Adapter;\n    }\n    catch {\n        // did not work, continue\n    }\n    // Attempt 5: Legacy resolve - until JS-Controller 4.0\n    adapterPath = path.join(controllerDir, \"lib/adapter.js\");\n    try {\n        // This was a default export prior to the TS migration\n        const Adapter = require(adapterPath);\n        if (Adapter)\n            return Adapter;\n    }\n    catch {\n        // did not work, continue\n    }\n    throw new Error(\"Cannot resolve adapter class\");\n    return process.exit(10);\n}\n/** Reads the configuration file of JS-Controller */\nexport function getConfig() {\n    return JSON.parse(fs.readFileSync(path.join(controllerDir, \"conf/iobroker.json\"), \"utf8\"));\n}\n/** Creates a new adapter instance */\nexport const adapter = resolveAdapterConstructor();\n/** Creates a new adapter instance */\nexport const Adapter = adapter;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoB;AACpB,WAAsB;AACtB,yBAA8B;AAC9B,qBAAkD;AAHlD;AAAA;AAKA,MAAMA,eAAU,kCAAc,YAAY,OAAO,YAAY,UAAU;AAKvE,SAAS,iBAAiB,WAAW;AAEjC,QAAM,gBAAgB,CAAC,0BAA0B,wBAAwB;AAEzE,MAAIC,qBAAgB,kCAAkB,aAAa;AAGnD,MAAIA;AACA,WAAOA;AAEX,EAAAA,qBAAgB,+BAAe,aAAa;AAC5C,MAAIA;AACA,WAAOA;AACX,MAAI,CAAC,WAAW;AACZ,YAAQ,IAAI,2BAA2B;AACvC,WAAO,QAAQ,KAAK,EAAE;AAAA,EAC1B,OACK;AACD,WAAO,QAAQ,KAAK;AAAA,EACxB;AACJ;AAEO,MAAM,gBAAgB,iBAAiB,CAAC,GAAC,wCAAS,SAAT,mBAAe,SAAS,aAAY;AACpF,SAAS,4BAA4B;AAEjC,MAAI,kBAAc,kCAAkB,CAAC,iCAAiC,CAAC;AACvE,MAAI,aAAa;AACb,QAAI;AACA,YAAM,EAAE,SAAAC,SAAQ,IAAIF,SAAQ,WAAW;AACvC,UAAIE;AACA,eAAOA;AAAA,IACf,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,oBAAc,kCAAkB,CAAC,iCAAiC,GAAG,CAAC,KAAK,KAAK,eAAe,cAAc,CAAC,CAAC;AAC/G,MAAI,aAAa;AACb,QAAI;AACA,YAAM,EAAE,SAAAA,SAAQ,IAAIF,SAAQ,WAAW;AACvC,UAAIE;AACA,eAAOA;AAAA,IACf,QACA;AAAA,IAEA;AAAA,EACJ;AAEA,gBAAc,KAAK,KAAK,eAAe,0BAA0B;AACjE,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE;AACA,aAAOA;AAAA,EACf,QACA;AAAA,EAEA;AAEA,gBAAc,KAAK,KAAK,eAAe,sBAAsB;AAC7D,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE;AACA,aAAOA;AAAA,EACf,QACA;AAAA,EAEA;AAEA,gBAAc,KAAK,KAAK,eAAe,gBAAgB;AACvD,MAAI;AAEA,UAAMA,WAAUF,SAAQ,WAAW;AACnC,QAAIE;AACA,aAAOA;AAAA,EACf,QACA;AAAA,EAEA;AACA,QAAM,IAAI,MAAM,8BAA8B;AAC9C,SAAO,QAAQ,KAAK,EAAE;AAC1B;AAEO,SAAS,YAAY;AACxB,SAAO,KAAK,MAAM,GAAG,aAAa,KAAK,KAAK,eAAe,oBAAoB,GAAG,MAAM,CAAC;AAC7F;AAEO,MAAM,UAAU,0BAA0B;AAE1C,MAAM,UAAU;",
  "names": ["require", "controllerDir", "Adapter"]
}
